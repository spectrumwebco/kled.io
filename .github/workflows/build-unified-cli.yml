name: Build Unified Kled CLI and Desktop App

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

jobs:
  build-cli-linux-windows:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, windows]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64

    steps:
      - name: Checkout kled.io Repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.24.1'

      - name: Clone Private Repositories
        env:
          GH_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
        run: |
          mkdir -p private-repos
          cd private-repos
          
          # Clone private repos
          gh repo clone spectrumwebco/kled
          gh repo clone spectrumwebco/kled-pro
          gh repo clone spectrumwebco/kledspace
          gh repo clone spectrumwebco/kpolicy

      - name: Build Unified CLI
        run: |
          # Use Makefile to build CLI
          make cross-compile
          
          # Create copies for all CLI interfaces
          cd dist/${{ matrix.os }}-${{ matrix.arch }}
          cp kled kcluster
          cp kled kledspace
          cp kled kpolicy
          
          # Add .exe extension for Windows
          if [ "${{ matrix.os }}" = "windows" ]; then
            cp kled.exe kcluster.exe
            cp kled.exe kledspace.exe
            cp kled.exe kpolicy.exe
          fi
          
          # Create distribution package
          cd ../..
          mkdir -p dist/packages
          
          if [ "${{ matrix.os }}" = "linux" ]; then
            tar -czf dist/packages/kled-${{ matrix.os }}-${{ matrix.arch }}.tar.gz -C dist/${{ matrix.os }}-${{ matrix.arch }} .
          elif [ "${{ matrix.os }}" = "windows" ]; then
            zip -j dist/packages/kled-${{ matrix.os }}-${{ matrix.arch }}.zip dist/${{ matrix.os }}-${{ matrix.arch }}/*.exe
          fi

      - name: Upload CLI Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: kled-cli-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/packages/kled-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.os == 'windows' && '.zip' || '.tar.gz' }}

  build-cli-macos:
    runs-on: [self-hosted, macOS, ARM64, MIC_GITHUB_spectrumwebco]
    strategy:
      matrix:
        arch: [amd64, arm64]

    steps:
      - name: Checkout kled.io Repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.24.1'

      - name: Clone Private Repositories
        env:
          GH_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
        run: |
          mkdir -p private-repos
          cd private-repos
          
          # Clone private repos
          gh repo clone spectrumwebco/kled
          gh repo clone spectrumwebco/kled-pro
          gh repo clone spectrumwebco/kledspace
          gh repo clone spectrumwebco/kpolicy

      - name: Build Unified CLI for macOS
        run: |
          # Use Makefile to build CLI
          make cross-compile
          
          # Create copies for all CLI interfaces
          cd dist/darwin-${{ matrix.arch }}
          cp kled kcluster
          cp kled kledspace
          cp kled kpolicy
          
          # Create distribution package
          cd ../..
          mkdir -p dist/packages
          tar -czf dist/packages/kled-darwin-${{ matrix.arch }}.tar.gz -C dist/darwin-${{ matrix.arch }} .

      - name: Upload CLI Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: kled-cli-darwin-${{ matrix.arch }}
          path: dist/packages/kled-darwin-${{ matrix.arch }}.tar.gz

  build-desktop-linux:
    runs-on: ubuntu-latest
    needs: [build-cli-linux-windows]
    
    steps:
      - name: Checkout kled.io Repository
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install Dependencies
        run: |
          cd desktop
          yarn install
          
      - name: Build Desktop App for Linux
        run: |
          cd desktop
          yarn build
          
      - name: Create Linux Packages
        run: |
          mkdir -p dist/packages
          cd desktop
          yarn package:linux
          mkdir -p ../dist/packages
          cp release/*.deb ../dist/packages/kled-desktop-linux-amd64.deb || true
          cp release/*.AppImage ../dist/packages/kled-desktop-linux-amd64.AppImage || true
          
      - name: Upload Desktop App Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: kled-desktop-linux
          path: |
            dist/packages/kled-desktop-linux-amd64.deb
            dist/packages/kled-desktop-linux-amd64.AppImage

  build-desktop-windows:
    runs-on: windows-latest
    needs: [build-cli-linux-windows]
    
    steps:
      - name: Checkout kled.io Repository
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install Dependencies
        run: |
          cd desktop
          yarn install
          
      - name: Build Desktop App for Windows
        run: |
          cd desktop
          yarn build
          
      - name: Create Windows Installer
        run: |
          cd desktop
          yarn package:win
          mkdir -p ..\dist\packages
          copy release\*.exe ..\dist\packages\kled-desktop-windows-amd64.exe
          
      - name: Test Windows Installer
        run: |
          # Verify the installer exists
          if (Test-Path -Path "dist\packages\kled-desktop-windows-amd64.exe") {
            echo "Windows installer created successfully"
            
            # Run comprehensive validation script
            .\scripts\validate-installer.ps1 -InstallerPath "dist\packages\kled-desktop-windows-amd64.exe"
            
            if ($LASTEXITCODE -ne 0) {
              echo "Installer validation failed"
              exit 1
            }
          } else {
            echo "Error: Windows installer not found"
            exit 1
          }
          
      - name: Upload Desktop App Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: kled-desktop-windows
          path: dist/packages/kled-desktop-windows-amd64.exe

  build-desktop-macos:
    runs-on: [self-hosted, macOS, ARM64, MIC_GITHUB_spectrumwebco]
    needs: [build-cli-macos]
    
    steps:
      - name: Checkout kled.io Repository
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        run: |
          brew install node@18
          echo 'export PATH="/usr/local/opt/node@18/bin:$PATH"' >> ~/.zshrc
          source ~/.zshrc
          
      - name: Install Dependencies
        run: |
          cd desktop
          yarn install
          
      - name: Build Desktop App for macOS
        run: |
          cd desktop
          yarn build
          
      - name: Create macOS DMG
        run: |
          cd desktop
          yarn package:mac
          mkdir -p ../dist/packages
          cp release/*.dmg ../dist/packages/kled-desktop-macos-arm64.dmg || true
          
      - name: Upload Desktop App Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: kled-desktop-macos
          path: dist/packages/kled-desktop-macos-arm64.dmg

  create-release:
    needs: [build-cli-linux-windows, build-cli-macos, build-desktop-linux, build-desktop-windows, build-desktop-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v3
        
      - name: Extract CLI Binaries from Packages
        run: |
          # Create directories for extracted binaries
          mkdir -p cli-binaries/linux-amd64 cli-binaries/linux-arm64 cli-binaries/windows-amd64 cli-binaries/darwin-amd64 cli-binaries/darwin-arm64
          
          # Extract Linux binaries
          tar -xzf kled-cli-linux-amd64/kled-linux-amd64.tar.gz -C cli-binaries/linux-amd64
          tar -xzf kled-cli-linux-arm64/kled-linux-arm64.tar.gz -C cli-binaries/linux-arm64
          
          # Extract Windows binaries
          unzip -o kled-cli-windows-amd64/kled-windows-amd64.zip -d cli-binaries/windows-amd64
          
          # Extract macOS binaries
          tar -xzf kled-cli-darwin-amd64/kled-darwin-amd64.tar.gz -C cli-binaries/darwin-amd64
          tar -xzf kled-cli-darwin-arm64/kled-darwin-arm64.tar.gz -C cli-binaries/darwin-arm64
      
      - name: Verify Artifacts
        run: |
          echo "Verifying CLI binaries..."
          ls -la cli-binaries/linux-amd64/
          ls -la cli-binaries/linux-arm64/
          ls -la cli-binaries/windows-amd64/
          ls -la cli-binaries/darwin-amd64/
          ls -la cli-binaries/darwin-arm64/
          
          echo "Verifying desktop installers..."
          ls -la kled-desktop-linux/ || echo "Linux desktop installer not found"
          ls -la kled-desktop-windows/ || echo "Windows desktop installer not found"
          ls -la kled-desktop-macos/ || echo "macOS desktop installer not found"
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            # CLI Binaries - Linux
            cli-binaries/linux-amd64/kled
            cli-binaries/linux-amd64/kcluster
            cli-binaries/linux-amd64/kledspace
            cli-binaries/linux-amd64/kpolicy
            cli-binaries/linux-arm64/kled
            cli-binaries/linux-arm64/kcluster
            cli-binaries/linux-arm64/kledspace
            cli-binaries/linux-arm64/kpolicy
            
            # CLI Binaries - Windows
            cli-binaries/windows-amd64/kled.exe
            cli-binaries/windows-amd64/kcluster.exe
            cli-binaries/windows-amd64/kledspace.exe
            cli-binaries/windows-amd64/kpolicy.exe
            
            # CLI Binaries - macOS
            cli-binaries/darwin-amd64/kled
            cli-binaries/darwin-amd64/kcluster
            cli-binaries/darwin-amd64/kledspace
            cli-binaries/darwin-amd64/kpolicy
            cli-binaries/darwin-arm64/kled
            cli-binaries/darwin-arm64/kcluster
            cli-binaries/darwin-arm64/kledspace
            cli-binaries/darwin-arm64/kpolicy
            
            # Desktop App Installers
            kled-desktop-linux/kled-desktop-linux-amd64.deb
            kled-desktop-linux/kled-desktop-linux-amd64.AppImage
            kled-desktop-windows/kled-desktop-windows-amd64.exe
            kled-desktop-macos/kled-desktop-macos-arm64.dmg
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
