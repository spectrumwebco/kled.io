name: Build and Publish

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:

jobs:
  build-cli:
    name: Build CLI Tools
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            output_dir: linux
            artifact_name: kled-cli-linux-amd64
            arch: amd64
          - os: ubuntu-latest
            output_dir: linux-arm64
            artifact_name: kled-cli-linux-arm64
            arch: arm64
          - os: macos-latest
            output_dir: macos
            artifact_name: kled-cli-macos-amd64
            arch: amd64
          - os: macos-latest
            output_dir: macos-arm64
            artifact_name: kled-cli-macos-arm64
            arch: arm64
          - os: windows-latest
            output_dir: windows
            artifact_name: kled-cli-windows
            arch: amd64

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Build CLI
        shell: bash
        run: |
          mkdir -p dist/${{ matrix.output_dir }}
          # Build the unified CLI binary directly without creating symlinks/batch files
          GOOS=${{ matrix.os == 'windows-latest' && 'windows' || matrix.os == 'macos-latest' && 'darwin' || 'linux' }} GOARCH=${{ matrix.arch }} go build -o dist/${{ matrix.output_dir }}/kled-cli${{ matrix.os == 'windows-latest' && '.exe' || '' }} ./cli/unified

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: dist/${{ matrix.output_dir }}/kled-cli${{ matrix.os == 'windows-latest' && '.exe' || '' }}

  build-desktop:
    name: Build Desktop App
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            output_dir: linux
            artifact_name: kled-desktop-linux
          - os: MIC_GITHUB_spectrumwebco
            output_dir: macos
            artifact_name: kled-desktop-macos
          - os: windows-latest
            output_dir: windows
            artifact_name: kled-desktop-windows
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'yarn'
          cache-dependency-path: './desktop/yarn.lock'

      - name: Install dependencies
        run: |
          cd desktop
          yarn install

      - name: Install additional dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build Frontend
        run: |
          cd desktop
          yarn build || yarn rsbuild build

      - name: Build Tauri App
        run: |
          cd desktop
          yarn tauri build || yarn tauri:build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            ${{ matrix.os == 'ubuntu-latest' && 'desktop/src-tauri/target/release/bundle/deb/*.deb' || '' }}
            ${{ matrix.os == 'ubuntu-latest' && 'desktop/src-tauri/target/release/bundle/appimage/*.AppImage' || '' }}
            ${{ matrix.os == 'MIC_GITHUB_spectrumwebco' && 'desktop/src-tauri/target/release/bundle/dmg/*.dmg' || '' }}
            ${{ matrix.os == 'MIC_GITHUB_spectrumwebco' && 'desktop/src-tauri/target/release/bundle/macos/*.app' || '' }}
            ${{ matrix.os == 'windows-latest' && 'desktop/src-tauri/target/release/bundle/msi/*.msi' || '' }}
            ${{ matrix.os == 'windows-latest' && 'desktop/src-tauri/target/release/bundle/nsis/*.exe' || '' }}

  publish-downloads:
    name: Publish Downloads
    needs: [build-cli, build-desktop]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Prepare download directory
        run: |
          # Use the Makefile to prepare the download directory structure
          make prepare-downloads

      - name: List artifacts
        run: |
          find artifacts -type f -name "*" | sort

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/**/*
          draft: false
          prerelease: false
          generate_release_notes: true
          
      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: web
          branch: gh-pages
